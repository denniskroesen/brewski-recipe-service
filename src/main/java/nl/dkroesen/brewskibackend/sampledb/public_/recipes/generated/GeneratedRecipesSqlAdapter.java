package nl.dkroesen.brewskibackend.sampledb.public_.recipes.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.Recipes;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.RecipesImpl;
import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * nl.dkroesen.brewskibackend.sampledb.public_.recipes.Recipes} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRecipesSqlAdapter {
    
    private final TableIdentifier<Recipes> tableIdentifier;
    
    protected GeneratedRecipesSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("sampledb", "public", "recipes");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected Recipes apply(ResultSet resultSet) throws SpeedmentException {
        final Recipes entity = createEntity();
        try {
            entity.setRecipeId( resultSet.getLong(1)   );
            entity.setName(     resultSet.getString(2) );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected RecipesImpl createEntity() {
        return new RecipesImpl();
    }
}