package nl.dkroesen.brewskibackend.sampledb.public_.recipes.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.Recipes;

/**
 * The generated base implementation of the {@link
 * nl.dkroesen.brewskibackend.sampledb.public_.recipes.Recipes}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRecipesImpl implements Recipes {
    
    private long recipeId;
    private String name;
    
    protected GeneratedRecipesImpl() {
        
    }
    
    @Override
    public long getRecipeId() {
        return recipeId;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public Recipes setRecipeId(long recipeId) {
        this.recipeId = recipeId;
        return this;
    }
    
    @Override
    public Recipes setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("recipeId = " + Objects.toString(getRecipeId()));
        sj.add("name = "     + Objects.toString(OptionalUtil.unwrap(getName())));
        return "RecipesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Recipes)) { return false; }
        final Recipes thatRecipes = (Recipes)that;
        if (this.getRecipeId() != thatRecipes.getRecipeId()) {return false; }
        if (!Objects.equals(this.getName(), thatRecipes.getName())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getRecipeId());
        hash = 31 * hash + Objects.hashCode(getName());
        return hash;
    }
}