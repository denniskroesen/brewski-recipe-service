package nl.dkroesen.brewskibackend.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.core.internal.AbstractApplicationBuilder;
import nl.dkroesen.brewskibackend.BrewskiBackendApplication;
import nl.dkroesen.brewskibackend.BrewskiBackendApplicationBuilder;
import nl.dkroesen.brewskibackend.BrewskiBackendApplicationImpl;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeStepsManagerImpl;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeStepsSqlAdapter;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.RecipesManagerImpl;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.RecipesSqlAdapter;

/**
 * A generated base {@link
 * com.speedment.runtime.core.internal.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named public.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBrewskiBackendApplicationBuilder extends AbstractApplicationBuilder<BrewskiBackendApplication, BrewskiBackendApplicationBuilder> {
    
    protected GeneratedBrewskiBackendApplicationBuilder() {
        super(BrewskiBackendApplicationImpl.class, GeneratedBrewskiBackendMetadata.class);
        withManager(RecipeStepsManagerImpl.class);
        withManager(RecipesManagerImpl.class);
        withComponent(RecipeStepsSqlAdapter.class);
        withComponent(RecipesSqlAdapter.class);
    }
    
    @Override
    public BrewskiBackendApplication build(Injector injector) {
        return injector.getOrThrow(BrewskiBackendApplication.class);
    }
}