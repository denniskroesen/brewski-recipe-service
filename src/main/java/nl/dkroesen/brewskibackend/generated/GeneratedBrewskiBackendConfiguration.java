package nl.dkroesen.brewskibackend.generated;

import com.speedment.common.annotation.GeneratedCode;
import nl.dkroesen.brewskibackend.BrewskiBackendApplication;
import nl.dkroesen.brewskibackend.BrewskiBackendApplicationBuilder;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeSteps;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeStepsManager;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.Recipes;
import nl.dkroesen.brewskibackend.sampledb.public_.recipes.RecipesManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;

/**
 * The spring configuration file
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public class GeneratedBrewskiBackendConfiguration {
    
    protected final static String URL_PROPERTY = "jdbc.url";
    protected final static String USERNAME_PROPERTY = "jdbc.username";
    protected final static String PASSWORD_PROPERTY = "jdbc.password";
    protected @Autowired Environment env;
    
    @Bean
    public BrewskiBackendApplication getApplication() {
        final BrewskiBackendApplicationBuilder builder =
            new BrewskiBackendApplicationBuilder();
        
        if (env.containsProperty(URL_PROPERTY)) {
            builder.withConnectionUrl(env.getProperty(URL_PROPERTY));
        }
        
        if (env.containsProperty(USERNAME_PROPERTY)) {
            builder.withUsername(env.getProperty(USERNAME_PROPERTY));
        }
        
        if (env.containsProperty(PASSWORD_PROPERTY)) {
            builder.withPassword(env.getProperty(PASSWORD_PROPERTY));
        }
        
        return builder.build();
    }
    
    @Bean
    public RecipeStepsManager getRecipeStepsManager(BrewskiBackendApplication app) {
        return app.getOrThrow(RecipeStepsManager.class);
    }
    
    @Bean
    public RecipesManager getRecipesManager(BrewskiBackendApplication app) {
        return app.getOrThrow(RecipesManager.class);
    }
}