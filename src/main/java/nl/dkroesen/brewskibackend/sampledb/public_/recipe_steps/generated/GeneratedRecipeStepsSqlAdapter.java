package nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeSteps;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeStepsImpl;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeSteps} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRecipeStepsSqlAdapter {
    
    private final TableIdentifier<RecipeSteps> tableIdentifier;
    
    protected GeneratedRecipeStepsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("sampledb", "public", "recipe_steps");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected RecipeSteps apply(ResultSet resultSet) throws SpeedmentException {
        final RecipeSteps entity = createEntity();
        try {
            entity.setRecipeStepId(      resultSet.getLong(1)  );
            entity.setRecipeId(          getLong(resultSet, 2) );
            entity.setDuration(          getInt(resultSet, 3)  );
            entity.setTargetTemperature( getInt(resultSet, 4)  );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected RecipeStepsImpl createEntity() {
        return new RecipeStepsImpl();
    }
}