package nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.StringJoiner;
import nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeSteps;

/**
 * The generated base implementation of the {@link
 * nl.dkroesen.brewskibackend.sampledb.public_.recipe_steps.RecipeSteps}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRecipeStepsImpl implements RecipeSteps {
    
    private long recipeStepId;
    private Long recipeId;
    private Integer duration;
    private Integer targetTemperature;
    
    protected GeneratedRecipeStepsImpl() {
        
    }
    
    @Override
    public long getRecipeStepId() {
        return recipeStepId;
    }
    
    @Override
    public OptionalLong getRecipeId() {
        return OptionalUtil.ofNullable(recipeId);
    }
    
    @Override
    public OptionalInt getDuration() {
        return OptionalUtil.ofNullable(duration);
    }
    
    @Override
    public OptionalInt getTargetTemperature() {
        return OptionalUtil.ofNullable(targetTemperature);
    }
    
    @Override
    public RecipeSteps setRecipeStepId(long recipeStepId) {
        this.recipeStepId = recipeStepId;
        return this;
    }
    
    @Override
    public RecipeSteps setRecipeId(Long recipeId) {
        this.recipeId = recipeId;
        return this;
    }
    
    @Override
    public RecipeSteps setDuration(Integer duration) {
        this.duration = duration;
        return this;
    }
    
    @Override
    public RecipeSteps setTargetTemperature(Integer targetTemperature) {
        this.targetTemperature = targetTemperature;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("recipeStepId = "      + Objects.toString(getRecipeStepId()));
        sj.add("recipeId = "          + Objects.toString(OptionalUtil.unwrap(getRecipeId())));
        sj.add("duration = "          + Objects.toString(OptionalUtil.unwrap(getDuration())));
        sj.add("targetTemperature = " + Objects.toString(OptionalUtil.unwrap(getTargetTemperature())));
        return "RecipeStepsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof RecipeSteps)) { return false; }
        final RecipeSteps thatRecipeSteps = (RecipeSteps)that;
        if (this.getRecipeStepId() != thatRecipeSteps.getRecipeStepId()) {return false; }
        if (!Objects.equals(this.getRecipeId(), thatRecipeSteps.getRecipeId())) {return false; }
        if (!Objects.equals(this.getDuration(), thatRecipeSteps.getDuration())) {return false; }
        if (!Objects.equals(this.getTargetTemperature(), thatRecipeSteps.getTargetTemperature())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getRecipeStepId());
        hash = 31 * hash + Objects.hashCode(getRecipeId());
        hash = 31 * hash + Objects.hashCode(getDuration());
        hash = 31 * hash + Objects.hashCode(getTargetTemperature());
        return hash;
    }
}