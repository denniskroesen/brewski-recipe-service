node('maven') {
   // define commands
   def mvnCmd = "mvn -s configuration/cicd-settings.xml"
   def templateName = "recipe-service"
   def devProject = "dev"
   def stageProject = "stage"

   stage ('Checkout') {
     git branch: 'master', url: 'https://github.com/denniskroesen/brewski-recipe-service.git'
   }

//   stage ('Test and Analysis') {
//      parallel (
//          'Test': {
//              sh "${mvnCmd} test"
//              step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
//          },
//          'Static Analysis': {
//              sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
//          }
//      )
//   }

   stage ('Push to Nexus') {
     sh "mvn deploy -DskipTests=true"
   }

   stage('Deploy DEV') {
        script {
            openshift.withCluster() {
                openshift.withProject(devProject) {
                    // create a new application from the templatePath
                    sh "mvn clean package"
                    sh "cd recipe-service && mvn fabric8:deploy -Popenshift -Dfabric8.namespace=${openshift.project()}"
                }
            }
        } // script
   }


  stage ('Deploy STAGE') {
     timeout(time:5, unit:'MINUTES') {
        input message: "Promote to STAGE?", ok: "Promote"
     }
        script {
            openshift.withCluster() {
                openshift.withProject(stageProject) {
                    // create a new application from the templatePath
                    sh "mvn clean fabric8:deploy -Popenshift -Dfabric8.namespace=${openshift.project()}"
                }
            }
        } // script
  }
}

def version() {
  def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}